module cast

import eq

ChurchUnit : Set
ChurchUnit := (X : Set) => X -> X

church_unit : ChurchUnit
church_unit -X x := x

PreUnitInd : ChurchUnit -> Set
PreUnitInd u := (P : (x : ChurchUnit) -> Set) => P church_unit -> P u

PreUnit : Set
PreUnit := (u : ChurchUnit) ∩ PreUnitInd u

pre_unit : PreUnit
pre_unit := [church_unit, λ -P u. u]

pre_unit_to : ChurchUnit -> PreUnit
pre_unit_to u := u pre_unit

pre_unit_fixed1 : (u : PreUnit) -> (pre_unit_to u.1).1 = (u.1)
pre_unit_fixed1 u := u.2 -(λ x. (pre_unit_to x).1 = x) β{church_unit}

pre_unit_fixed : (u : PreUnit) -> pre_unit_to u.1 = u
pre_unit_fixed u := ϑ1{pre_unit_fixed1 u, pre_unit_to u.1, u}

pre_unit_ind : (u : PreUnit) -> (P : (x : PreUnit) -> Set) => P pre_unit -> P u
pre_unit_ind u -P xs :=
  let inner : P (pre_unit_to u.1) := u.2 -(λ x. P (pre_unit_to x)) xs
  leibniz -PreUnit -P -(pre_unit_to u.1) -u inner (pre_unit_fixed u)

UnitInd : PreUnit -> Set
UnitInd u := (P : (x:PreUnit) -> Set) => P pre_unit -> P u

Unit : Set
Unit := (u : PreUnit) ∩ UnitInd u

unit : Unit
unit := [pre_unit, λ -P u. u]

unit_to : PreUnit -> Unit
unit_to u := u.1 unit

unit_fixed : (u : PreUnit) -> u = (unit_to u).1
unit_fixed u := pre_unit_ind u -(λ x. x = (unit_to x).1) β{pre_unit}

pre_unit_cast : PreUnit -> Unit
pre_unit_cast u := φ { u, unit_to u, unit_fixed u }

unit_ind : (u : Unit) -> (P : Unit -> Set) => P unit -> P u
unit_ind u -P cs := u.2 -(λ x. P (pre_unit_cast x)) cs

church_unit_eta : ChurchUnit -> ChurchUnit
church_unit_eta u := λ -X x. u x

pre_unit_eta : PreUnit -> PreUnit
pre_unit_eta u := [church_unit_eta u.1, λ -P x. u.2 -(λ u. P (church_unit_eta u)) x]

unit_eta : Unit -> Unit
unit_eta u := [pre_unit_eta u.1, λ -P x. u.2 -(λ u. P (pre_unit_eta u)) x]

unit_ind_witness : (u : Unit) -> Unit ∩ ((P : (x:Unit) -> Set) => P unit -> P u)
unit_ind_witness u := [unit_eta u, unit_ind u]

unit_ind_evidence : (u : Unit) -> u = (unit_ind_witness u).1
unit_ind_evidence u := unit_ind u -(λ x. x = (unit_ind_witness x).1) β{unit}

unit_cast_full : (u : Unit) -> Unit ∩ ((P : (x:Unit) -> Set) => P unit -> P u)
unit_cast_full u := φ { u, unit_ind_witness u, unit_ind_evidence u }

unit_rec : Unit -> (X:Set) => X -> X
unit_rec u -X x := (unit_cast_full u).2 -(λ u. X) x

pre_unit_compose : PreUnit -> PreUnit -> PreUnit
pre_unit_compose u v := [λ -X x. v.1 -X (u.1 -X x),
  λ -P x. v.2 -(λ v. P (λ -X x. v -X (u.1 -X x))) (u.2 -(λ u. P (λ -X x. u -X x)) x)]

unit_compose : Unit -> Unit -> Unit
unit_compose u v := [pre_unit_compose u.1 v.1,
  λ -P x. v.2 -(λ v. P (pre_unit_compose u.1 v)) (u.2 -(λ u. P (pre_unit_compose u pre_unit)) x)]

Cast : Set -> Set -> Set
Cast A B := (f : A -> A ∩ B) ∩ Unit

cast : (A:Set) => (B:Set) => (k : Cast A B) -> A -> B
cast -A -B k a := (k.1 a).2

cast_eq : (A:Set) => (B:Set) => (k : Cast A B) -> (a:A) -> a = (k.1 a).1
cast_eq -A -B k a := (unit_cast_full k.2).2 -(λ k. a = (unit_rec k -A a)) β{a}

cast_trans : (A:Set) => (B:Set) => (C:Set) => Cast A B -> Cast B C -> Cast A C
cast_trans -A -B -C u v :=
  [λ a. [unit_rec v.2 -A (unit_rec u.2 -A a), (v.1 (u.1 a).2).2],
  unit_compose u.2 v.2]

cast_refl : (A : Set) => Cast A A
cast_refl -A := [λ a. [a, a], unit]

cast_eta : (A:Set) => (B:Set) => Cast A B -> Cast A B
cast_eta -A -B k := [λ a. k.1 a, unit_eta k.2]

cast_idx_eta : (I:Set) => (A:I -> Set) => (B:I -> Set) => ((i:I) => Cast (A i) (B i)) -> (i:I) => Cast (A i) (B i)
cast_idx_eta -I -A -B k -i := [λ a. (k -i).1 a, unit_eta (k -i).2]

DepCast : (A:Set) -> (A -> Set) -> Set
DepCast A B := ((a:A) -> A ∩ B a) ∩ Unit

dcast : (A:Set) => (B:A -> Set) => (k : DepCast A B) -> (a:A) -> B a
dcast -A -B k a := (k.1 a).2

dcast_down : (A:Set) => (B:Set) => Cast (DepCast A (λ b. B)) (Cast A B)
dcast_down -A -B := [λ c. [c, c], unit]

unit_cast : DepCast Unit (λ u. (P : (x:Unit) -> Set) => P unit -> P u)
unit_cast := [λ u. [u, (unit_cast_full u).2], unit]

cast_singleton1 : (A:Set) => (B:Set) => (a:Cast A B) -> (b:Cast A B) -> (a.2) = (b.2)
cast_singleton1 -A -B a b := (unit_cast.1 a.2).2 -(λ u. u = (b.2))
  ((unit_cast.1 b.2).2 -(λ u. unit = u) β{unit})

cast_singleton : (A:Set) => (B:Set) => (a:Cast A B) -> (b:Cast A B) -> a = b
cast_singleton -A -B a b := ϑ2{cast_singleton1 a b, a, b}

CastMono : (Set -> Set) -> Set
CastMono F := (A:Set) => (B:Set) => Cast A B -> Cast (F A) (F B)

IdxCastMono : (I:Set) -> ((I -> Set) -> I -> Set) -> Set
IdxCastMono I F := (A:I -> Set) => (B:I -> Set) => ((i:I) => Cast (A i) (B i)) -> (i:I) => Cast (F A i) (F B i)

mono_erasure : (A:Set) => (B:Set) => (A -> A) -> (A -> A)
mono_erasure -A -B k x := k x 

cast_forget : (A:Set) => (B:Set) => Cast A B -> Cast A A
cast_forget -A -B k := [λ a. [(k.1 a).1, (k.1 a).1], unit_eta k.2]

Functor : (Set -> Set) -> Set
Functor F := (A:Set) => (B:Set) => (A -> B) -> F A -> F B

FunctorCompositionLaw : (F: Set -> Set) -> (fmap: Functor F) -> Set
FunctorCompositionLaw F fmap := (A:Set) => (B:Set) => (C:Set) =>
  (f:A -> B) -> (g:B -> C) -> (a:F A) ->
  fmap -A -C (compose g f) a = compose (fmap -B -C g) (fmap -A -B f) a

FunctorIdentityLaw : (F: Set -> Set) -> (fmap: Functor F) -> Set
FunctorIdentityLaw F fmap := (A:Set) =>
  (f:A -> A) -> (id: (a:A) -> f a = a) ->
  (a:F A) ->
  fmap -A -A f a = a

cast_icomm : (A:Set) => (B:Set) => Cast (A ∩ B) (B ∩ A)
cast_icomm -A -B := [λ x. [x, [x.2, x.1]], unit]

theta_phi : (A:Set) => (B:A -> Set) => (a:(x:A) ∩ B x) => φ {a.1, a, β{a.1}} = a
theta_phi -A -B -a := β{a}

theta1 : (A:Set) => (B:A -> Set) => (a:(x:A) ∩ B x) -> (b:(x:A) ∩ B x) -> ((b.1) = (a.1)) -> a = b
theta1 -A -B a b e :=
  leibniz -_ -(λ x. x = b) -_ -_ (leibniz -_ -(λ x. (e : x = (a.1)) => φ { x, a, e } = b) -b.1 -a.1 (λ -i. β{b}) e -β{a.1}) (theta_phi -_ -_ -a)

-- λ e. e (λ x. x)
theta2 : (A:Set) => (B:Set) => (a:A ∩ B) => (b:A ∩ B) => ((a.2) = (b.2)) -> a = b
theta2 -A -B -a -b e :=
  let e2 : (((cast -(A ∩ B) -(B ∩ A) (cast_icomm -A -B) a).1) = ((cast -(A ∩ B) -(B ∩ A) (cast_icomm -A -B) b).1)) := e 
  let e3 := ϑ1 { e2, cast -(A ∩ B) -(B ∩ A) (cast_icomm -A -B) a, cast -(A ∩ B) -(B ∩ A) (cast_icomm -A -B) b }
  cong e3 -(cast -(B ∩ A) -(A ∩ B) (cast_icomm -B -A))
