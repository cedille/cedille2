module nat

import eq
import cast

Nat1 : Set
Nat1 := (X:Set) => X -> ((R:Set) => (R -> R) -> (R -> X) -> R -> X) -> X

zero1 : Nat1
zero1 -X z s := z

succ1 : Nat1 -> Nat1
succ1 n -X z s := s -Nat1 (λ x. x) (λ n. n z s) n

NatInd1 : Nat1 -> Set
NatInd1 n := (P:Nat1 -> Set) =>
  P zero1 ->
  ((R:Set) => (f:R -> Nat1) -> (ih:(r:R) -> P (f r)) -> (r:R) -> P (succ1 (f r))) ->
  P n

Nat2 : Set
Nat2 := (n : Nat1) ∩ NatInd1 n

zero2 : Nat2
zero2 := [zero1, λ -P z s. z]

succ2 : Nat2 -> Nat2
succ2 n := [succ1 n.1, λ -P z s. s -Nat2 (λ x. x.1) (λ i. i.2 -P z s) n]

nat1_to : Nat1 -> Nat2
nat1_to n := n zero2 (λ -R f rec x. succ2 (rec x))

nat1_fixed1 : (n:Nat2) -> (nat1_to n.1).1 = (n.1)
nat1_fixed1 n := n.2 -(λ i. (nat1_to i).1 = i) β{zero1}
  (λ -R f rec xs. J -_ -(nat1_to (f xs)).1 -(f xs) (rec xs) -(λ x y e. succ1 x = succ1 y) (λ -i. β{succ1 i}))

nat1_fixed : (n:Nat2) -> (nat1_to n.1) = n
nat1_fixed x := ϑ1{nat1_fixed1 x, nat1_to x.1, x}

nat2_ind : (n:Nat2) ->
  (P:Nat2 -> Set) =>
  P zero2 ->
  ((R:Set) => (f:R -> Nat2) -> (ih:(r:R) -> P (f r)) -> (r:R) -> P (succ2 (f r))) ->
  P n
nat2_ind n -P z s :=
  let inner : P (nat1_to n.1) := n.2 -(λ x. P (nat1_to x))
    z
    (λ -R f ih r. s -R (λ r. nat1_to (f r)) ih r)
  subst -_ -(nat1_to n.1) -n (nat1_fixed n) -(λ y e. P y) inner

NatInd : Nat2 -> Set
NatInd n := (P:Nat2 -> Set) =>
  P zero2 ->
  ((R:Set) => (f:Cast R Nat2) -> (ih:(r:R) -> P (cast f r)) -> (r:R) -> P (succ2 (cast f r))) ->
  P n

Nat : Set
Nat := (n : Nat2) ∩ NatInd n

zero : Nat
zero := [zero2, λ -P z s. z]

succ : Nat -> Nat
succ n := [succ2 n.1, λ -P z s. s -Nat [λ x. [x, x.1], unit] (λ i. i.2 -P z s) n]

nat_to : (n:Nat2) -> Nat
nat_to n := n.1 zero (λ -R f rec x. succ (rec x))

nat_fixed : (n:Nat2) -> (nat_to n).1 = n
nat_fixed n := nat2_ind n -(λ x. (nat_to x).1 = x)
  β{zero2}
  (λ -R f ih r. subst -_ -(f r) -(nat_to (f r)).1 (sym -_ -(nat_to (f r)).1 -(f r) (ih r)) -(λ y e. succ2 y = succ2 (f r)) β{succ2 (f r)})

nat_cast : Cast Nat2 Nat
nat_cast := [λ x. [x, φ {x, nat_to x, sym (nat_fixed x)}], unit]

nat_ind : (n:Nat) ->
  (P:Nat -> Set) =>
  P zero ->
  ((R:Set) => (f:Cast R Nat) -> (ih:(r:R) -> P (cast f r)) -> (r:R) -> P (succ (cast f r))) ->
  P n
nat_ind n -P z s := n.2 -(λ n. P (cast nat_cast n)) z
  (λ -R f ih r. s -R (cast_trans f nat_cast) ih r)

nat_rec : Nat -> (X:Set) => X -> ((R:Set) => Cast R Nat -> (R -> X) -> R -> X) -> X
nat_rec n -X z s := nat_ind n -(λ n. X) z s
