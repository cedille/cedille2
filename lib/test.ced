module test

Id : Set
Id := (X:Set) => X -> X

self : Id -> Id
self u := u -Id u

False : Set
False := (X:Set) => X

bad : (P:False -> Set) => (f:False) -> P f
bad -P f :=
  let e1 := f -((f -(Id -> Id)) = self)
  let e2 := f -(f = f -(False -> False) f)
  ?
