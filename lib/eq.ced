module eq

the : (A : Set) => A -> A
the -A a := a

compose : (A:Set) => (B:Set) => (C:Set) => (B -> C) -> (A -> B) -> A -> C
compose -A -B -C g f a := g (f a)

subst : (A : Set) => (a : A) => (b : A) => (e : a = b) -> (P : (y : A) -> (a = y) -> Set) => P a β{a} -> P b e
subst -A -a -b e -P := 𝜓 { e, P }

J : (A : Set) =>
  (x : A) =>
  (y : A) =>
  (e : x = y) ->
  (P : (x : A) -> (y : A) -> (e : x = y) -> Set) =>
  (w : (i : A) => P i i β{i}) ->
  P x y e
J -A -x -y e -P w := subst e -(λ y e. P x y e) (w -x)

leibniz : (A : Set) => (P : (i : A) -> Set) => (x : A) => (y : A) => P x -> (x = y) -> P y
leibniz -A -P -x -y p e := J e -(λ x y e. P x -> P y) (λ -i p. p) p

sym : (A:Set) => (a:A) => (b:A) => (a = b) -> b = a
sym -A -a -b e := subst e -(λ y e. y = a) β{a}

trans : (A:Set) => (a:A) => (b:A) => (c:A) => (a = b) -> (b = c) -> a = c
trans -A -a -b -c e1 e2 := subst e2 -(λ y e. a = y) e1

to_true : (A:Set) => (a:A) => (b:A) => (e:a = b) -> (X:Set) => X -> X
to_true -A -a -b e -X x := subst e -(λ y e. X) x

cong : (A:Set) => (B:Set) => (a:A) => (b:A) => (a = b) -> (f:A -> B) => (f a = f b)
cong -A -B -a -b e -f := subst e -(λ y e. f a = f y) β{f a}

wrap : (A:Set) => (a:A) => (b:A) => (a = b) -> (a = b)
wrap -A -a -b e := subst e -(λ y e. a = y) β{a}
