module rec

import eq
import cast

Rec : (Set -> Set) -> Set
Rec F := (X : Set) => Lin (F X) X -> X

rec_lin : (F:Set -> Set) => (X:Set) => Cast (F X) X -> Lin (Rec F) X
rec_lin -F -X l := [位 r. r X (cast_to_lin (F X) X l), 位 u. unit_to_fn.1 u l.2]

rec_fold : (F:Set -> Set) => LinMono F -> F (Rec F) -> Rec F
rec_fold -F m x := 位 -X c. c.1 ((m (Rec F) X (rec_lin F X c)).1 x)

-- -- rec_in : (F:Set -> Set) => LinMono F -> Lin (F (Rec F)) (Rec F)
-- -- rec_in -F m := [rec_fold F m, 位 u. ? ]

-- rec_unfold : (F:Set -> Set) => LinMono F -> Rec F -> F (Rec F)
-- rec_unfold -F m x := x (F (Rec F)) ?
