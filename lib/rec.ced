module rec

import eq
import cast

Rec : (Set -> Set) -> Set
Rec F := (X : Set) => (Cast (F X) X) -> X

in : (F : Set -> Set) => CastMono F -> F (Rec F) -> Rec F
in -F mono xs -X ctor :=
  let f : Cast (Rec F) X := [Î» x. [? , x -X ctor], ?];
  cast ctor (cast (mono f) xs)
  

