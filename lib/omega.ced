module omega

import cast

Id : Set
Id := (X : Set) => X -> X

id : Id
id -X x := x

delt : Id -> Id
delt u := u -Id u

#erase delt

False : Set
False := (X:Set) => X

------------------------------------------------------
-- Why you can't use normal phi with FV(|e|) ⊂ FV(|a|)
------------------------------------------------------

-- b : False -> (Id -> Id) ∩ Id
-- b f := [f -(Id -> Id), f -Id]

-- e : (f : False) -> delt = (b f).1
-- e f := f -(delt = (b f).1)

-- bad : False => Id
-- bad -f := delt (φ { delt, b -f, e -f }).2

-- fdelt : False -> Id -> Id
-- fdelt f u := ?


------------------------------------------------------
------------------------------------------------------

import pair


A : Set 
A := Pair (Id -> Id) False

T : Set
T := ((A -> Id -> Id) -> (Id -> Id) -> Id)

b : A -> A ∩ T
b w := (snd w) -(A ∩ T)

e : (x : A) -> x = (b x).1
e x := (snd x) -(x = (b x).1)

phi : A -> A ∩ T
phi a := φ { a, b a, e a }

p1 : False -> A
p1 f := pair delt f

p2 : A -> Id -> Id
p2 x := fst x

-- λ f. λ b. delt
inner : False -> Id
inner f := (phi (p1 f)).2 p2 delt

bad : False -> Id -> Id
bad f := (inner f -Id id) -(Id -> Id) delt

-- e : { a = b }

-- a : A
-- f : (a : A) -> (x : A) ∩ (B x)
-- e : (a : A) -> (a = (f a).1), but otherwise FV(|e|) is empty

-- φ e - a { b } : A
-- |φ e - a { b }| = |b|

-- |a| is contextually equivalent to |b| in A contexts
-- C[ ] : (Γ, A) -> (ε, Unit)

    -- |C[a]| terminates iff |C[b]| terminates

-- Layer 0: Initially: Accept defeat, allow phi to produce non-terminating terms.
    -- Just use Cedille1 phi
-- Layer 1: Also, communicate when phi is safe to use, given an outside proof.
-- Layer 2: In the surface language, proceed a Bohm-proof for the user to show that they are in fact contextually equivalent
    -- It is *possible* though unlikey, that a Bohm-out algorithm would be terminating (b/c objects without phis are terminating)










-- Not : Set -> Set
-- Not A := A -> False

-- True : Set
-- True := Not False

-- delta : True
-- delta := λ d. d True d

-- omega : Not ((A:Set) => (B:Set) => Cast A B)
-- omega := λ h -X. (h True X).1 delta

-- #erase omega

-- Omega : Not ((A:Set) => (B:Set) => Cast A B)
-- Omega := λ h. delta (omega h)

-- #erase Omega
