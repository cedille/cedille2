module church/inductive/nat.

import ../nat as Ch.

Inductive : Ch.Nat ➔ ★
= λ n. ∀ P:Ch.Nat ➔ ★. P Ch.zero ➔ (∀ x:Ch.Nat. P x ➔ P (Ch.succ x)) ➔ P n.

Nat : ★ = ι n:Ch.Nat. Inductive n.

zero : Nat
= [Ch.zero, λ -P z s. z].

succ : Nat ➔ Nat
= λ n. [Ch.succ n.1, λ -P z s. s -n.1 (n.2 ·P z s)].

to : Ch.Nat ➔ Nat
= λ x. x ·Nat zero succ.

reflect : Π n:Nat. { to n ≃ n }
= λ n. n.2 ·(λ x. {to x ≃ x}) β
    (λ -x ih. χ {Ch.succ (to x) ≃ Ch.succ x} - ρ ih - β).

induct : Π n:Nat. ∀ P:Nat ➔ ★. P zero ➔ (∀ m:Nat. P m ➔ P (succ m)) ➔ P n
= λ n -P z s. ρ ς (reflect n)
    - (n.2 ·(λ x. P (to x)) z
        (λ -x ih. χ (P (succ (to x))) - s -(to x) ih)).

rec : Π n:Nat. ∀ X:★. X ➔ (X ➔ X) ➔ X
= λ n. n.1.

add : Nat ➔ Nat ➔ Nat
= λ n m. rec n ·Nat m succ.

add_zero_left : Π n:Nat. {add zero n ≃ n}
= λ n. β.

add_zero_right : Π n:Nat. {add n zero ≃ n}
= λ n. induct n ·(λ x. {add x zero ≃ x}) β
    (λ -x ih. χ {succ (add x zero) ≃ succ x} - ρ ih - β).

add_succ_left : Π n:Nat. Π m:Nat. {add (succ n) m ≃ succ (add n m)}
= λ n m. β.

add_succ_right : Π n:Nat. Π m:Nat. {add n (succ m) ≃ succ (add n m)}
= λ n m. induct n ·(λ x. {add x (succ m) ≃ succ (add x m)}) β
    (λ -x ih. χ {succ (add x (succ m)) ≃ succ (add (succ x) m)}
        - ρ ih - β).

{- add_comm : Π n:Nat. Π m:Nat. {add n m ≃ add m n}
= λ n. induct n ·(λ x. Π m:Nat. {add x m ≃ add m x})
    (λ m. ρ (add_zero_right m) - β)
    (λ -x ih m. χ {succ (add x m) ≃ add m (succ x)}
        - ρ (ih m)
        - ρ (add_succ_right m x)
        - β). -}

add_comm : Π n:Nat. Π m:Nat. {add n m ≃ add m n}
= λ n. induct n ·(λ x. Π m:Nat. {add x m ≃ add m x}) ● ●.

import ../../core/not.
import ../../core/false.

_ : Not ·{succ zero ≃ zero}
= λ -f. δ - f.
