module church/inductive/bool.

import ../bool as B.

Inductive : B.Bool ➔ ★ = λ b. ∀ P:B.Bool ➔ ★. P B.tt ➔ P B.ff ➔ P b.

Bool : ★ = ι b:B.Bool. Inductive b.

tt : Bool
= [B.tt, Λ P. λ tt. λ ff. tt].

ff : Bool
= [B.ff, Λ P. λ tt. λ ff. ff].

toBool : B.Bool ➔ Bool
= λ x. x ·Bool tt ff.

reflectBool : Π b:Bool. { toBool b ≃ b }
= λ b. b.2 ·(λ x. {toBool x ≃ x}) β β.

inductBool : Π b:Bool. ∀ P:Bool ➔ ★. P tt ➔ P ff ➔ P b
= λ b -P tt ff. ρ (ς (reflectBool b))
    - (b.2 ·(λ x. P (toBool x)) tt ff).

ite : ∀ X:★. Bool ➔ X ➔ X ➔ X
= λ -X if then else. inductBool if ·(λ _. X) then else.

not : Bool ➔ Bool
= λ x. ite ·Bool x ff tt.

_ : {not tt ≃ ff} = β.
_ : {not ff ≃ tt} = β.

not_idem : Π x:Bool. {not (not x) ≃ x}
= λ x. inductBool x ·(λ x. {not (not x) ≃ x}) β β.

not_not_idem : Π x:Bool. {not (not (not (not x))) ≃ x}
= λ x. ρ (not_idem x) - ρ (not_idem x) - β.

or : Bool ➔ Bool ➔ Bool
= λ x y. ite ·Bool x tt y.

_ : {or tt tt ≃ tt} = β.
_ : {or tt ff ≃ tt} = β.
_ : {or ff tt ≃ tt} = β.
_ : {or ff ff ≃ ff} = β.

and : Bool ➔ Bool ➔ Bool
= λ x y. ite ·Bool x y ff.

_ : {and tt tt ≃ tt} = β.
_ : {and tt ff ≃ ff} = β.
_ : {and ff tt ≃ ff} = β.
_ : {and ff ff ≃ ff} = β.

and_comm : Π x:Bool. Π y:Bool. {and x y ≃ and y x}
= λ x y. inductBool x ·(λ x. {and x y ≃ and y x})
  (inductBool y ·(λ y. {and tt y ≃ and y tt}) β β)
  (inductBool y ·(λ y. {and ff y ≃ and y ff}) β β).

xor : Bool ➔ Bool ➔ Bool
= λ x y. ite ·Bool x (not y) y.

_ : {xor tt tt ≃ ff} = β.
_ : {xor tt ff ≃ tt} = β.
_ : {xor ff tt ≃ tt} = β.
_ : {xor ff ff ≃ ff} = β.
