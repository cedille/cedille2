module basic.

import ../church/inductive/nat as Nat.
import ../church/inductive/list as List.
import ../church/inductive/vec as Vec.

Nat = Nat.Nat.
zero = Nat.zero.
succ = Nat.succ.

List = List.List.
nil = List.nil.
cons = List.cons.

Vec = Vec.Vec.
vnil = Vec.vnil.
vcons = Vec.vcons.

IdT : ★ = ∀ X:★. X ➔ X.

id : IdT
= λ -X x. x.

_ : IdT = id id id id.

_ : List Nat = nil.
_ : List _ = (nil -Nat).
_ = (nil -Nat).
_ = cons zero nil.
_ = cons zero (cons zero nil).
_ = cons (succ zero) (cons (succ (succ zero)) (cons zero nil)).

_ : Vec Nat zero = vnil.
_ : Vec _ _ = (vnil -Nat).
_ = vnil -Nat.

v1 = vcons zero vnil.
v2 = vcons -zero zero vnil.
_ : {v1 ≃ v2} = β.
v3 = vcons -_ -_ zero vnil.
_ : {v2 ≃ v3} = β.
v4 = vcons -Nat zero vnil.
_ : {v3 ≃ v4} = β.
v5 = vcons -_ -zero zero vnil.
_ : {v4 ≃ v5} = β.
v6 = vcons -Nat -_ zero vnil.
_ : {v5 ≃ v6} = β.
_ : {v6 ≃ v1} = β.

_ = vcons zero (vcons zero vnil).
_ = vcons zero (vcons zero (vcons zero vnil)).
_ = vcons zero (vcons zero (vcons zero (vcons zero vnil))).
_ = vcons (succ zero) (vcons (succ zero) (vcons zero vnil)).
