
module church.

False : ★ = ∀ X:★. X.

explode : ∀ X:★. False ➔ X
= Λ X. λ f. f ·X.

True : ★ = False ➔ False.

Unit : ★ = ∀ X:★. X ➔ X.

unit : Unit
= Λ X. λ x. x.

Bool : ★ = ∀ X:★. X ➔ X ➔ X.

true : Bool
= Λ X. λ x. λ y. x.

false : Bool
= Λ X. λ x. λ y. y.

Nat : ★ = ∀ X:★. X ➔ (X ➔ X) ➔ X.

zero : Nat
= Λ X. λ z. λ s. z.

zero2 : Nat ➾ Nat
= Λ n. zero.

succ : Nat ➔ Nat
= λ n. Λ X. λ z. λ s. s (n·X z s).

List : ★ ➔ ★ = λ A. ∀ X:★. X ➔ (A ➔ X ➔ X) ➔ X. 

nil : ∀ A:★. List·A
= Λ A. Λ X. λ n. λ c. n.

cons : ∀ A:★. A ➔ List·A ➔ List·A
= Λ A. λ a. λ l. Λ X. λ n. λ c. c a (l·X n c).

{- Vec : ★ ➔ Nat ➔ ★
= λ A. λ n. ∀ X:Nat ➔ ★. X zero ➔ (∀ n:Nat. A ➔ X n ➔ X (succ n)) ➔ X n.

vnil : ∀ A:★. Vec·A zero
= Λ A. Λ X. λ nil. λ cons. nil.

vcons : ∀ A:★. ∀ n:Nat. A ➔ Vec·A n ➔ Vec·A (succ n)
= Λ A. Λ n. λ a. λ l. Λ X. λ nil. λ cons. cons -(succ n) a (l·X nil cons). -}
